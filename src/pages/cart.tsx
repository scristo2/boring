import { NextPage, GetServerSideProps } from "next";
import { withSessionSsr } from "@/lib/auth/session";
import { SessionUserType } from "@/lib/auth/sessionusertype";
import { dataUserSession } from "@/lib/auth/sessionusertype";
import Head from "next/head";
import Layout from "@/components/Layout";
import SizeImage from "@/components/SizeImage";
import Link from "next/link";
import styles from "@/styles/Cart.module.css";
import { getProductsFirebase } from "@/lib/firebase";
import { KeysApiProducts } from "@/lib/products/productsType";
import { useEffect, useRef, useState } from "react";
import type { Cart } from "@/lib/auth/sessionusertype";
import LoadingModal from "@/components/warnings/LoadingModal";
import SomeErrorModal from "@/components/warnings/SomeErrorModal";
import _fetch from "isomorphic-fetch";
import { UseContext } from "@/lib/Appcontext";
import { loadStripe } from "@stripe/stripe-js";
import { useRouter } from "next/router";


type CuantityProducts = {

    "prod_KoEn5ABqqPyDJR": number
    "prod_NmqA4oCiGkPWYa": number
}

type CartProps = {

    lang: string,
    user: SessionUserType,
    products: KeysApiProducts[],
    cuantityProducts: CuantityProducts | any
}

const stripePromise = loadStripe(`${process.env.NEXT_PUBLIC_STRIPE_PUBLISH}`);


const Cart: NextPage<CartProps> = ({ lang, user, products, cuantityProducts }) => {

    const router = useRouter();
    const context = UseContext();
    const [cartProducts, setCartProducts] = useState<SessionUserType>(user);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [cartErrorMessage, setCartErrorMessage] = useState<string>("");


    const showError = useRef<HTMLInputElement>(null);

    useEffect(() => {

        setCartProducts(user);

        return () => {
            setCartProducts(user);
        }
    }, [user]);





    const refreshServer = () => {

        router.replace(router.asPath, router.asPath);
    }

    const deleteProduct = async (index: string) => {


        setIsLoading(true);

        const res = await _fetch("/api/auth/edit-cart-session", {
            method: "POST",
            headers: {

                "Content-Type": "application/json",
                "Authorization": `Bearer ${process.env.NEXT_PUBLIC_BEARER_ORFIBESA}`
            },

            body: JSON.stringify({ action: "delete", position: index }) //envio la posicion del elento del array para borrarl en la api

        }).then(data => data.json())
            .then(datafinal => {

                if (datafinal.status === "ok") {

                    console.log(datafinal.message);

                } else {

                    throw Error(datafinal?.message);
                }
            })
            .catch(e => {
                console.log("error: ", e?.message);
                setCartErrorMessage("Ha ocurrido un error al eliminar este producto del carrito.¡Intentalo de nuevo!")
                showError.current?.click();
            });

        setIsLoading(false);

        refreshServer();



    }


    const addMoreProductNumber = async (reference: string) => {

        setIsLoading(true);

        const res = await _fetch("/api/auth/edit-cart-session", {
            method: "POST",
            headers: {

                "Content-Type": "application/json",
                "Authorization": `Bearer ${process.env.NEXT_PUBLIC_BEARER_ORFIBESA}`
            },

            body: JSON.stringify({ action: "add", reference: reference }) //envio la posicion del elento del array para borrarl en la api

        }).then(data => data.json())
            .then(result => {

                if (result.status !== "ok") {

                    throw Error(result?.message)
                }

                console.log(result)
            }).catch(e => {

                console.log("error: ", e.message);
                setCartErrorMessage("Ha ocurrido un error al añadir el producto al carrito.¡Intentalo de nuevo!")
                showError.current?.click();
            })


        setIsLoading(false);

        refreshServer();
        return;
    }



    //carrito vacio
    if (cartProducts.cart.totalElements < 1) {

        return (<>
            <Head>
                <title>Carro de compras -Orfibesa</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Layout>
                <div className="container text-center mt-5"><SizeImage src="/empty-car.png" alt="Imagen de carrito de compras" width={100} height={100} /></div>
                <div className="container text-center mt-5"><p className="fs-5">Tu Carrito esta Vacio</p></div>
                <div className="container text-center mt-5"><Link type="button" href={"/"} locale={lang} className="btn btn-primary">seguir comprando</Link></div>
            </Layout>
        </>)


    }


    //carrito con algun producto
    return (<>
        <Head>
            <title>Carro de compras-Orfibesa</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <Layout>
            {/*header*/}
            <div className={`mt-4 container ${isLoading ? "opacity-25" : "opacity-100"} ${isLoading ? "pe-none" : "pe-auto"}`}>
                <div className={`d-flex ${styles.pointer}`}>
                    <i className={`bi bi-arrow-left mx-2 ${styles.pointer}`}></i>
                    <Link href={"/"} lang={lang}><p className={`${styles.pointer}`}>Seguir comprando</p></Link>
                </div>
                <hr className="" />
            </div>
            {/*main*/}
            <div className={`container ${isLoading ? "opacity-25" : "opacity-100"} ${isLoading ? "pe-none" : "pe-auto"}`}>
                <p className="text-muted">Shopping cart</p>
                <p className="text-muted">Tu tienes {cartProducts.cart.totalElements} productos en el carrito!</p>
                <div className="row">
                    <div className="col-12 col-lg-6">
                        {

                            cuantityProducts.map((e: KeysApiProducts, i: number) => {


                                if (e.reference.length > 0) {

                                    return (<div className={`my-5 d-flex flex-wrap justify-content-around align-items-center ${styles.divCartProduct}`} key={i}>
                                        <div className=""><SizeImage alt={`imagen del ${e.url_image}`} src={`${e.url_page}`} className="rounded-circle" width={75} height={75} /></div>
                                        <div className="text-center">
                                            <p className="h5">{e.name}</p>
                                            <p className="text-muted">{e.categorie}</p>
                                        </div>
                                        <div className="text-center">
                                            <div><p>{e.cuantity}</p></div>
                                            <div>
                                                <input type="button" className="mx-2" value={"+"} onClick={() => addMoreProductNumber(e.reference)} />
                                                <input type="button" className="mx-2" value={"-"} onClick={() => deleteProduct(e.reference)} />
                                            </div>
                                        </div>
                                        <div className="text-center">
                                            <p className="h4">{e.totalPrice}€</p>
                                        </div>
                                    </div>)
                                }

                            })

                        }
                    </div>
                    <div className="col-12 col-lg-6"><p>precio total : {cartProducts.cart.totalPrice}€</p></div>
                </div>
            </div>
            {/*footer*/}
            <div>
                {isLoading && <LoadingModal />}
                <SomeErrorModal message={cartErrorMessage} />

                {/*dispay none porque no tiene que verse*/}
                <input ref={showError} type="button" className={`btn btn-primary d-none`} data-bs-toggle="modal" data-bs-target="#errorModal" value={"show error"} />
            </div>
        </Layout>
    </>)

}

export default Cart;

export const getServerSideProps: GetServerSideProps = withSessionSsr(
    async function getServerSideProps(context) {

        const products = await getProductsFirebase();


        //si hay algun error al coger los productos fuerzo un 404 not found
        if (products.toString().length < 1) {

            return {

                notFound: true
            }
        }

        const cuantityProductss: Array<KeysApiProducts> = [];

        products.map((e: KeysApiProducts, i: number) => {

            if (context.req.session.user?.cart.products[i] === e.reference) {
                cuantityProductss.push({ [e.reference]: e.name, name: e.name, totalPrice: 0, cuantity: 0, id: e.id, categorie: e.categorie, price: e.price, url_image: e.url_image, url_page: e.url_page, type: e.type, reference: e.reference });
            } else {

                cuantityProductss.push({ name: "", totalPrice: 0, cuantity: 0, id: 0, categorie: "", price: "", url_image: "", url_page: "", type: "", reference: "", });
            }
        });



        let totalPrice = 0;

        const user = context.req.session.user;


        //aqui sacamos el precio total de los productos del carrito

        user?.cart.products.map((e, i) => {

            const countRepetedProductTotal = user.cart.products.filter(value => value === e).length;


            products.map((reference: KeysApiProducts, i: number) => {

                if (e === reference.reference) {

                    cuantityProductss[i].totalPrice = (parseInt(reference.price) * countRepetedProductTotal);
                    cuantityProductss[i].cuantity = countRepetedProductTotal;
                    cuantityProductss[i].url_page = reference.url_image,
                        cuantityProductss[i].name = reference.name;
                    cuantityProductss[i].reference = reference.reference;
                    cuantityProductss[i].categorie = reference.categorie;
                }

                return;
            })

            return;
        });


        //sacamos el total de todo
        cuantityProductss.map((e, i) => {
            totalPrice += e.totalPrice || 0;
            return;
        });






        //editamos la session con el precio
        context.req.session.user = {

            cart: {

                totalElements: context.req.session.user?.cart.totalElements!,
                totalPrice: totalPrice,
                products: context.req.session.user!.cart.products

            }
        }

        await context.req.session.save();




        return {
            props: {
                user: context.req.session.user || dataUserSession,
                lang: context.locale,
                products: products,
                cuantityProducts: cuantityProductss

            }

        }
    },

);